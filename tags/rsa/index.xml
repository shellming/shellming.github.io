<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Rsa on Hello World</title><link>https://shellming.github.io/tags/rsa/</link><description>Recent content in Rsa on Hello World</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Tue, 11 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://shellming.github.io/tags/rsa/index.xml" rel="self" type="application/rss+xml"/><item><title>RSA 公钥私钥生成及使用</title><link>https://shellming.github.io/2018/12/11/rsa/</link><pubDate>Tue, 11 Dec 2018 00:00:00 +0000</pubDate><guid>https://shellming.github.io/2018/12/11/rsa/</guid><description>有些接口交互需要用 RSA 算法对参数进行签名以保证安全性，记录一下 RSA 密钥对的生成以及使用
秘钥生成 为方便 Java 使用，最终生成的私钥需要转化成 PKCS8 格式
# 生成 SSLeay 格式的 rsa 私钥 openssl genrsa -out rsaprivatekey.pem 1024 # 生成对应的公钥 openssl rsa -in rsaprivatekey.pem -pubout -out rsapublickey.pem # 将 RSA 私钥转换成 PKCS8 格式 openssl pkcs8 -topk8 -inform PEM -in rsaprivatekey.pem -outform PEM -nocrypt -out rsaprivatepkcs8.pem 由于生成的私钥中已经包含了公钥信息，所以服务器端只要保存私钥就可以了，需要的时候可以从私钥中导出公钥
# 将私钥从 PKCS8 格式转回 SSLeay 格式的 openssl rsa -in rsaprivatepkcs8.pem -out ssleay.pem # 提取公钥 openssl rsa -in ssleay.pem -pubout -out rsapublickey.</description></item></channel></rss>