<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Java on Hello World</title><link>https://shellming.github.io/tags/java/</link><description>Recent content in Java on Hello World</description><generator>Hugo -- gohugo.io</generator><language>zh-cn</language><lastBuildDate>Thu, 13 Dec 2018 00:00:00 +0000</lastBuildDate><atom:link href="https://shellming.github.io/tags/java/index.xml" rel="self" type="application/rss+xml"/><item><title>Guava Retrying</title><link>https://shellming.github.io/2018/12/13/guava-retrying/</link><pubDate>Thu, 13 Dec 2018 00:00:00 +0000</pubDate><guid>https://shellming.github.io/2018/12/13/guava-retrying/</guid><description>简介 Guava Retrying 是一个灵活的 Java 重试工具，该工具基于Guava 的 predicate 机制， 提供了处理各种停止、重试、异常处理的能力。相较于 Spring Retry 只能根据抛出的异常决定是否重试，Guava Retrying 可以根据返回结果来决定是否重试，功能更加强大。项目 Github 地址
基本使用 官网的基本用例
Callable&amp;lt;Boolean&amp;gt; callable = new Callable&amp;lt;Boolean&amp;gt;() { public Boolean call() throws Exception { return true; // do something useful here } }; Retryer&amp;lt;Boolean&amp;gt; retryer = RetryerBuilder.&amp;lt;Boolean&amp;gt;newBuilder() .retryIfResult(Predicates.&amp;lt;Boolean&amp;gt;isNull()) .retryIfExceptionOfType(IOException.class) .retryIfRuntimeException() .withStopStrategy(StopStrategies.stopAfterAttempt(3)) .build(); try { retryer.call(callable); } catch (RetryException e) { e.printStackTrace(); } catch (ExecutionException e) { e.printStackTrace(); } 重试条件：结果返回 null 或者抛出 IOException 或者抛出 RuntimeException 停止条件：尝试三次，失败后停止 RetryException：尝试失败后抛出，包含了失败信息 ExecutionException：执行过程中抛出了预料之外的异常，终止了执行 Fibonacci Backoff 一直重试，永不停止，每次重试失败后的间隔时间为一个斐波那契数列，最大间隔时间为2分钟</description></item></channel></rss>